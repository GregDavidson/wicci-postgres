#!/bin/bash
set -o pipefail
echo -n 'Warning: This script is NOT a good black box!
It does not check everything it should check, e.g.
if an existing PostgreSQL is running it will behave badly!
If it fails for some reason it should stop but it will not
try to clean up after itself. 

We assume you have done
  git clone http://git.postgresql.org/git/postgresql.git
or equivalent to obtain an up-to-date reposotory.

You may need to customize this script to your needs and
you may need to alter it for future PostgreSQL releases.
I tried to make it easy to read, understand and alter.
You should read and understand it before using it!

Press ENTER to continue or Control-C to abort.'
read ans
pgm="${0##*/}"			# name of this script
pgm_dir="${0%/*}"		# location of this script
usage="$pgm [directory-containing-posgres-git-repository]"
# This script, when run as root should do some necessary preparation
# for installing PostgreSQL, then delegate the rest of the job to
pg_install_script_name="pgsql-install-as-postgres"
# which runs as postgres.  That script will notify you of
# a final step which must be done manually!
try_code=10			# non-zero and unique
try() {
	(( try_code++ ))	# increment the failure code
	if "$@"; then echo "OK: $@"
	else echo "$pgm FAILED: $@"; exit "$try_code"
	fi
}
try test root = "`whoami`"
case $# in
    0) git_repo="." ;;
    1) git_repo="$1" ;;
    *) echo "$usage"; exit 1 ;;
esac
try test -d "$git_repo"
dir0="$PWD"			# pg_install_script might be here
try cd "$git_repo"
try test -d ".git"
try test -d "src"
try test -f "configure"
(( try_code++ ))
if PACKAGE_VERSION="`grep '^PACKAGE_VERSION=' configure`"
	 then echo "OK: $PACKAGE_VERSION"
	 else echo "grep '^PACKAGE_VERSION=' configure' FAILED"; exit "$try_code"
fi
try test -n "$PACKAGE_VERSION"
(( try_code++ ))
if version=$(expr "$PACKAGE_VERSION" : "^PACKAGE_VERSION='\([^'']*\)'")
then echo "OK: $version"
else echo "expr $PACKAGE_VERSION FAILED"; exit "$try_code"
fi
try test -n "$version"
pgdir="pgsql-$version"
for dd in /usr/local/SW.d /usr/local/SW /usr/local; do
    [ -d "$dd" ] && pgpath="$dd/$pgdir" && break
done
for dd in /usr/local/SW /usr/local; do
    [ -d "$dd" ] && pglink="$dd/pgsql" && break
done
pg_user=postgres								# account owning PostgreSQL server
#pg_user=_postgres								# macintosh osx
pg_group="$pg_user"
export pg_user pg_group					# for $pg_install_script
try mkdir -p "$pgpath"
grep "^$pg_group:" /etc/group /dev/null ||
	sudo groupadd "$pg_group"
grep "^$pg_user:" /etc/passwd /dev/null ||
	sudo useradd -g "$pg_group" -d "$pglink" "$pg_user"
try chown "$pg_user"."$pg_group" "$pgpath"

for d in "$pgm_dir" "$git_repo" "$dir0" `echo $PATH | tr : ' '`; do
    [ -f "$d/$pg_install_script_name" ] && break
done
pg_install_script="$d/$pg_install_script_name"
try test -f "$pg_install_script" -a -x "$pg_install_script"
log="pgsql-install-transcript-`date -I`"
# The following assumes that non-zero exit codes will be generated
# from the install_script on error:
try chown -R "$pg_user"."$pg_group" .
if su -c "version=$version $pg_install_script" "$pg_user" | su -c "tee -a $log" "$pg_user"; then
  if [ -e "$pglink" ]; then
    echo "Currently $pglink is:"
    ls -l "$pglink"
    echo "You might like to:"
    echo rm "$pglink"
    echo ln -s "$pgpath" "$pglink"
    echo 'Enjoy!'
  fi
else
  echo "$pgm: $pg_install_script seems to have failed!
  Examine the transcript:
	  $git_repo/$git_repo/$log
  If you can fix the problem, e.g. missing packages,
  you can try re-running as $pg_user:
	  $pg_install_script | tee -a $log
  from the directory:
	  $git_repo/$git_repo
  Good luck\!
  "
fi
