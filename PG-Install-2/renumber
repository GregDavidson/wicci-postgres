#!/bin/dash
PgmName="${0##*/}"

usage="$PgmName textfile..."
purpose='renumber exit-codes and line-numbers in source file lines
- we only change non-zero exit-codes!
- new exit-codes are sequential
    - starting with 10
    - incrementing across all files!
- line-numbers are the true line numbers of each source file'
limitations='only one pair of substitutions will be done for any line
substitutions will only occur with two patterns
- "`cr [1-9][0-9]* [1-9][0-9]*
- "`cs [^ ]+ [1-9][0-9]* [1-9][0-9]*
where
- first digit-string is the exit-code
- second digit-string is the line-number'

[ $# -eq 0 ] && {
    printf "* Usage:\n%s\n" "$usage"
    printf "* Purpose:\n%s\n" "$purpose"
    printf "* Limitations:\n%s\n" "$limitations"
    exit 0
}

# awk sends the altered file to stdout
# - we need to redirect it to the output file
# awk sends the next starting code to stderr
# - we need to capture it in parameter next_code
# this requires some fancy nesting:
#   next_code=$( { awk 'awk script' >>output_file; } >&2 )
# which is embedded in another level:
# { next_code=$( { awk '...' >>$tmp; } >&2 ) && mv $tmp $f; }; code=next_code
#     ; is equivalent to a newline, ready for a new command
#     "double-quote" unpredictable expansions, e.g. "$f" not $f
# The single-quoted 'awk script' being passed to awk
# is NOT shell code: awk is a very different language!

code=10                         # first code for first file
for f; do
    [ -f "$f" ] || {
        echo "$PgmName warning: Skipping non-file argument $f"
        continue
    }
    tmp="$f.$$"                   # "unique" name, $$ --> our PID
    touch "$tmp"                  # create as empty file
    chmod --reference="$f" "$tmp" # set permissions of $f on "$tmp"
    {                             # { awk && mv; code=next_code; }
next_code=$(                      # capture next code
    {                             # next code delivered to stderr
        awk -v code="$code" '
BEGIN {
# each pattern has 5 parts
# the exit-code is part 2
# the line-number is part 4
    cr="(.*\"`cr *)([1-9][0-9]*)( +)([1-9][0-9]*)(.*)"
    cs="(.*\"`cs *[^ ]+ *)([1-9][0-9]*)( +)([1-9][0-9]*)(.*)"
}
{line=$0}
line ~ cr {
    line=gensub(cr, "\\1" code++ "\\3\\4\\5", "1", line)
    line=gensub(cr, "\\1\\2\\3" NR "\\5", "1", line)
}
line ~ cs {
    line=gensub(cs, "\\1" code++ "\\3\\4\\5", "1", line)
    line=gensub(cs, "\\1\\2\\3" NR "\\5", "1", line)
}
{print line}
END {print code >"/dev/stderr"}
' "$f" >"$tmp"                  # end of awk with stdout redirected
    } 2>&1                      # end of block with stderr redirected
    ) && mv --backup=numbered "$tmp" "$f" # end of awk && mv
code="$next_code"
    } || {
        echo "$PgmName warning: Something went wrong processing $f"
        continue
    }
done
