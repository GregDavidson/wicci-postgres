#!/usr/bin/bash

# Note: =Emacs= =outshine-mode= lets you treat this file as a hierarchical
# document. TAB on comment lines beginning with asterisks will hide/show nodes
# much like with =OrgMode=.

# * Install PostgreSQL for the Wicci

# Run script with no arguments for help!

# ** A Few Initial Settings and Global Parameters

# stop on variable or pipe errors
set -eu
set -vx                         # DEBUG !!

declare -r Pgm_Name="${0##*/}"
declare -r Pgm_Dir="$(realpath $(dirname $0))"

# Normally we Capitalize_Global_Parameters
# We're deliberately leaving =from= as lower case
# Allowing code to be moved into and out of functions
declare -r from=''                # where we're coming from

# Currently readonly
# Ideally settable from argument options
declare -r Build_Shell='/bin/dash' # Make settable from config
declare -r Build_User='bin'        # Make settable from config

# A Few of the Globals which will be set later
declare -g Phase                # Logs are LOG-$Phase
declare -g PG_Path              # defined in Install Paths below

# ** Usage Patterns

# How this script can be used

declare -r options=('--help' '--dryrun' '--verbose')

declare -rA Patterns=( [help]=0 [tarball]=1 [git-dir]=2 [src-dir]=3 )

# In array Arg_Patterns, note Posix documentation convention
# of optional arguments in [square brackets]
declare -ra Arg_Patterns=(
''
'PATH-TO-TARBALL [PARENT-INSTALL-DIR]'
'VERSION POSTGRESQL-GIT-REPOSITORY [PARENT-INSTALL-DIR]'
'VERSION [PARENT-INSTALL-DIR]'
)
declare -ra Arg_Pattern_Explanations=(
'give help'
'install from tar archive'
'install specified version from git repository'
'install specified version from existing source'
)

# These three arrays should have the same number of elements
[ "${#Patterns[@]}" =  "${#Arg_Patterns[@]}" ] ||
code_error 1 "#Patterns != #Arg_Patterns"
[ "${#Patterns[@]}" =  "${#Arg_Pattern_Explanations[@]}" ] ||
code_error 2 "#Patterns != #Arg_Pattern_Explanations"

give_full_help() {
    local i
    for i in ${!Arg_Patterns[@]}; do
        printf '%s %s %s\n\t%s\n' \
               "$Pgm_Name" "${Options[*]}" "${Arg_Patterns[$i]}" \
               "${Arg_Pattern_Explanations[$i]}"
    done
}

# ** Process Command Line Options

Dry_Run='false'
Give_Help='false'
Verbose='false'
Pattern='unknown'

option_arg() {
    case "$1" in
        --dryrun) Dry_Run='true' ;;
        --help) Give_Help='true' ;;
        --verbose) Verbose='true' ;;
        *) return 1 ;;
    esac
    return 0
}

# record options and save non-option arguments
Args=( )                        # Non-Option Args
for Arg; do
    option_arg "$Arg" || Args+="$Arg"
done

# Reset command line arguments
set -- "${Args[@]}"             # check this works!
[ "X${Args[*]}" = "X$*" ] || code_error 3 "Args - foiled again!"

# if no non-option arguments, give full help
[ ${#Args[@]} -eq 0 ] && { give_full_help; exit 0; }
# put in the code for targeted help!!

# ** Create A Temporary $Build_Dir

# (1) we need to log creating the place where logs go
# (2) code_from_user_mkdir creates directories for us but
#     it needs "$Build_Dir" to already exist for logging!
# Let's cut the Gordion Knot here!

# Record and Create Temporary Log Directory
Build_Dir="/tmp/$Pgm_Name-$$"   # Just for now

# Everything done as $Build_User comes through here
# Commands need to be simple enough to parse as $*
# e.g. no spaces in names or paths, no special characters
su_build_dir_cmd() {
    local dir="$1"; shift
    su -s "$Build_Shell" "$Build_User" -c "cd \"$dir\" ; $*"
}

# This works because =/tmp= allows anyone to create things there
su_build_dir_cmd '/tmp' "mkdir -p $Build_Dir"

# Once we've got the proper Build Directory we'll copy
# the logs over to it and remove this one

# ** su and Logging Functions

# *** Low Level Functions

# Our calling context grows when functions nest
# Ignore empty context components.
join_froms() {
    local result='' delim=''
    for a; do
        [ -n "$a" ] && result="$result$delim$a"
        delim=' '
    done
    print '%s' "$result"
}

# Everything further done as $Build_User comes through here
# Commands need to be simple enough to parse as $*
# e.g. no spaces in names or paths, no special characters
su_build() { su_build_dir_cmd "$Build_Dir" "$*"; }

# All output to the current log goes through these two functions

log_sink() { su_build "cat >> LOG-$Phase"; }
log_tee() { >&2 su_build "tee -a LOG-$Phase"; }

# *** Fancy log_example Function

# Using awk
# log stdin content, if any, as an OrgMode example block
log_example() {
    awk -v b='#+begin_example' -v e='#+end_example' \
        'NR==1{print b}NR>0{print}END{if (NR>0) print e}' | log_sink
}

# log_example() {
#     local line content=false
#     { while read line; do
#           $content || {
#               content=true
#               printf -- '%s\n' '#+begin_example'
#           }
#           printf -- '%s\n' "$line"
#       done
#       $content && printf -- '%s\n' '#+end_example'
#     } | log_sink
# }

# *** su_code_... Functions

# su_code_from_user_dir_cmd exit-code context user dir cmd...
# ?? Every irregular side-effecting command comes through here!
# Report and logging syntax compatible with OrgMode documents
su_code_from_user_dir_cmd() {
    local code="$1" user="$3" dir="$4"; shift 4
    local from=$(join_froms "$2" "$user" "$dir")
    report_from '**' "$from: $*"
    $Dry_Run && [ mkdir != "$1" ] && [ root != "$user" ] && return 0
    su -s "$Build_Shell" "$user" -c "cd \"$dir\" ; $*"  | log_example ||
        report_from -:: "FAILED[$code] $from" "$*"
}

# su_code_from_cmd exit-code from cmd...
# Every side-effecting command run as $Build_User comes through here!
# Report and logging syntax compatible with OrgMode documents
su_code_from_cmd() {
    su_code_from_user_dir_cmd "$1" "$2" "$Build_User" "$Build_Dir" "${@:3}"
}

su_code_cmd() {
    su_code_from_user_dir_cmd "$1" '' "$Build_User" "$Build_Dir" "${@:2}"
}

su_pg__code_from_cmd() {
    su_code_from_user_dir_cmd "$1" "$2" "postgres" "$PG_Path" "${@:3}"
}

# ** Reports and Logging Convenience Functions

# All informational messages go through here
# to current LOG and to stderr
# report_from [FORMAT] FROM REPORT...
report_from() {
    set -vx                         # debug temp!!!
    case "$1" in
        (:) printf '%s: $s\n' "$1" "${2-}" ;;
        (-:) printf '- %s: $s\n' "$1" "${2-}" ;;
        (-::) printf '%s: $s\n' "$1" "${2-}" ;;
        (*) printf '%s\n' "$*" ;;
    esac | log_tee
}

set_phase() {
    declare -g Phase="$1"
    { printf -- '%s -*- mode: %s; -*-\n' '' Org
      printf -- '#+%s: %s\n' TITLE 'PostgreSQL for Wicci Installation Log'
      printf -- '#+%s: %s\n' DATE "$(date)"
      printf -- '* Phase %s\n' "$Phase"
    } | log_sink
}

set_phase SETUP
# Let's retroactively log the creation of the temporary $Build_Dir
# And just to show, let's /only/ log it, suppressing stderr output
2>/dev/null report_from -:: 'OK' mkdir -p "$Build_Dir"

# exit 0                          # debug temp!!!
level_report() {
    # I'm gathering that the $Pgm_Name is superfluous
    # local from="$Pgm_Name $1"; shift
    local from="$1"; shift
    report_from -:: "$from" "$@"
}
from_level_report() {
    # I'm gathering that the $Pgm_Name is superfluous
    # local from="$Pgm_Name.$1 $2" ; shift 2
    local from="$$1 $2" ; shift 2
    report_from -:: "$from" "$@"
}
code_error() {
    local code="$1"; shift
    level_report "error $code" "$@"
    exit "$code"
}
code_from_error() {
    local code="$1" from="$2"; shift 2
    from_level_report "$from" "error $code" "$@"
    exit "$code"
}

# *** Directory management

# Using ls, grep
# how can we do this just using bash features??
empty_dir() { [ -d "$1" ] && ! ls -qAH -- "$1" | grep -q .; }

# Using groups, cut
# could always be hardwired with a case
# since user should be either bin or postgres
code_from_user_group() {
    local from="$(join_froms "$2" 'code_from_user_group')" 
    local code="$1" user="$3"
    groups "$user" | cut -d ' ' -f 3 ||
        code_from_error "$code" "$from" "Can't get $user's group"
}

# code_from_user_mkdir EXIT-CODE USER DIR_PATH
# Create or find empty directory DIR_PATH
code_from_user_mkdir() {
    local from="(join_froms "$from" 'code_from_user_mkdir')"
    local code="$1" user="$3" path="$(realpath "$4")"
    local parent="$(dirname "$path")"
    local group="$(code_from_user_group "$code" "$from" "$user")"
    su_code_from_user_dir_cmd "$code" "$from" root "$parent" \
                              mkdir -p "$path"
    su_code_from_user_dir_cmd "$code" "$from" root "$parent" \
                              chown "$user:$group" "$path"
    dir="$(dirname "$path")"
    empty_dir "$path" ||
        code_from_error "$code" "$from" "Expected empty_dir $path"
}

# ** Reporting and Deriving Parameter Values

report_param() {
    local -n v="$1"
    printf -- '%s = %s\n' "$1" "$v"
}

report_params() {
    local p; for p; do report_param "$p"; done
}

report_initial_globals() {
    report_params Pgm_Name Pgm_Dir Give_Help Dry_Run
    printf -- '%s = %s\n' 'Arguments' "${Args[*]}"
}

$Verbose && report_initial_globals

# we will need values for these global variables
# call once we've sussed the argument patterns
suss_globals() {
    local from='suss_globals'
    [ -n "${Version:-}" ] ||
        code_from_error 4 "$from" "Expected Version"
    declare -gr Project="${Project:-postgresql-$Version}"
    local pp="${Project_Parent:-/usr/local/src}"
    declare -gr Project_Parent="$(realpath "$pp")" ||
        code_from_error 4 "$from" "Expected directory path $pp"
    declare -gr Project_Dir="$Project_Parent/$Project"
    return 0
}

# can't call this yet!
report_sussed_globals() {
    report_params Pattern
    case "$Pattern" in
        (tarball) report_params Archive
                  ;;
    esac
    report_params Version Project Project_Parent Project_Dir Build_Dir
}

# ** Determine Argument Patterns and Finalize Globals

# *** tarball pattern

try_tarball() {
#   set -vx                  # debug temp!!!
    local from='try_tarball'
    [ $# -gt 0 -a $# -le 2 ] || return 1
    [ -f "$1" ] || return 1
    [ $# -eq 1 ] || [ -d "$2" ] || return 1
    local f1=${1##*/} # without the path
    local f2=${f1%.*} # without last extension
    local f           # trial project name
    case "$f1" in
        (*.tar) f=$f2 ;;
        (*.tar.*) f=${f2%.*} ;;
        (*) return 1;;
    esac
    declare -gr Pattern='tarball' # commit to pattern
    # further deviations will be errors
    local v=${f##*-}            # trial version string
    local regexp_pattern='[1-9][0-9]?.[0-9][0-9]?(rc)?'
    [[ "$v" =~ $regexp_pattern ]] ||
        code_from_error 5 "$from" "unknown version pattern in $f"
    # We're satisfied, so
    Archive=$(realpath "$1")
    Version="$v"
    Project="$f"
    [ $# = 2 ] && Project_Parent="$2"
    return 0
}

# *** other patterns

try_version_git() {
    local from='try_version_git'
    pattern='tarball'
    from_level_report "$from" apology "$Pattern pattern not yet implemented"
    return 1
}

try_bare_version() {
    local from='try_bare_version'
    pattern='version'
    from_level_report "$from" apology "$Pattern pattern not yet implemented"
    return 1
}

# *** determine install pattern

try_tarball "$@" || try_version_git "$@" || try_bare_version "$@" ||
    code_error 6 'unrecognized install pattern'

suss_globals || code_error 7 "can't suss globals"

# *** Set Install Paths

PG_Dir="pgsql-$Version"
for dd in /usr/local/SW.d /usr/local/SW /usr/local; do
    [ -d "$dd" ] && PG_Path="$dd/$PG_Dir" && break
done
PG_Bin="$PG_Path/bin"
PG_Data="$PG_Path/data"
PG_Log="$PG_Data/logfile"
PG_Conf="$PG_Data/postgresql.conf"
PG_Conf_orig="$PG_Conf-$Version"

# *** Try to find tcl library

for tcl in /usr/{lib,lib64}{,/tcl*}/tclConfig.sh; do
    [ -f "$tcl" ] && break
done
if [ -f "${tcl:-}" ]; then
    with_tcl="--with-tcl with_tclconfig=--with-tclconfig=${tcl%/*}"
else
    with_tcl=''
    level_report warning "Can't find tcl, will proceed without it!!"
fi

# ** Prepare, Configure, Build, Install

# *** Prepare Build Directory

cd "$Project_Parent" || code_error 8 "Can't cd to $Project_Parent"
code_from_user_mkdir 9 '' "$Build_Dir" "$Project_Dir"
cd "$Project" || code_error 10 "Can't cd to $Project_Dir"

# extract_archive TARBALL PROJECT [DEST-DIR=.] [TEMP-DIR=Temp]
# safely extract the given archive to an empty TEMP-DIR
# move the TEMP-DIR/PROJECT result to DEST-DIR
# remove the now-empty TEMP-DIR
untar_archive() {
    local a="$1" p="$2" d="${3:-.}" t="${4:-Temp}" from='untar_archive'
    code_from_user_mkdir 11 "$from" "$Build_User" "$t"
    su_code_cmd 12 tar -C "$t" -xf "$a" ||
        code_from_error 13 "$from" "Can't extract $a in $(real_dir $t)"
    su_code_cmd 14 mv "$t/$p" "$d" ||
        code_from_error 15 "$from" "Can't mv $t/$p $d"
    su_code_cmd 16 rmdir "$t" ||
        code_from_error 17 "$from" "Can't remove temp dir $(real_dir $t)"
}

# Skip any build directories from prior attempts
get_build_dir() {
    local n=1 parent="$Project_Dir" from='get_build_dir'
    cd "$parent" || code_from_error 18 "$from" "Can't cd to $parent"
    while [ -d "Attempt-$n" ] && ! empty_dir "Attempt-$n" ; do
        let ++n
    done
    local old="$Build_Dir" new="$parent/Attempt-$n"
    code_from_user_mkdir 19 "$from" "$Build_User" "$new"
    su_code_cmd 20 mv "$old"/* "$new"
    declare -gr Build_Dir="$new" # should not change again
    cd "$Build_Dir" ||
        code_from_error 21 "$from" "Can't cd to build directory $Build_Dir"
}

get_build_dir

$Verbose && report_sussed_globals

case "$Pattern" in
    (tarball)
        untar_archive "$Archive" "$Project"
        su_code_cmd 22 chmod -R a-w "$Project"
        untar_archive "$Archive" "$Project" "$Build_Dir"
        ;;
    (*) from_level_report "$from" apology "$Pattern pattern not yet implemented"
        exit 23 ;;
esac

# ***  Configure, Build and Install PostgreSQL
report_from '**  Configure, Build and Install PostgreSQL'

set_phase CONFIG

Config_Options=(
    --with-libxml
    --with-libxslt
    --enable-debug
    --enable-cassert
    $with_tcl                   # don't quote!
    --prefix="$PG_Path"
)

su_code_cmd 24 ./configure ${Config_Options[*]}

set_phase BUILD

su_code_cmd 25 make

set_phase INSTALL

code_from_user_mkdir 26 "$from" postgres "$PG_Path"
su_code_cmd 27 make install

# *** Try to configure, build and install some contributed modules

# add some contributed modules
cd "$Build_Dir/contrib" || code_error 28 "Can't cd to $Build_Dir/contrib"

for d in xml2 intarray citext hstore; do
	(
      set_phase $d-BUILD
      su_code_cmd 29 make
      set_phase $d-INSTALL
      su_code_cmd  30 make install
  )
done

# *** Procedures to run as Postgres

su_pg_data__code_from_cmd() {
    su_pg__code_from_cmd "$1" "$2" "$3" -D "$PG_Data" "$@:4"
}

set_phase POSTGRES

su_pg__code_from_cmd 31 "$from" mkdir "$PG_Data"

# initialize the PostgreSQL system
su_pg_data__code_from_cmd 32 "$from" initdb

# start the PostgreSQL server
su_pg_data__code_from_cmd 33 "$from" pg_ctl -l "$PG_Log" start
sleep 5	# seems to need a moment to get ready

# add needed languages to database template1
Langs="pltcl"
# case "$Version" in
#     8*) Langs="plpgsql $Langs" ;;
# esac
for lang in "$Langs"; do
	# try $PG_Bin/createlang "$lang" template1
	echo "create trusted procedural language '$lang';" | su_pg__code_from_cmd 34 "$from" psql template1
done

# create some databases
su_pg__code_from_cmd 35 "$from" createdb wicci1
echo "PostgreSQL installed into $PG_Path"
echo "$PG_Path linked to $PG_Link"
su_pg__code_from_cmd 36 "$from" mv "$PG_Conf" "$PG_Conf_orig"
su_pg__code_from_cmd 37 "$from" cp "$PG_Conf_orig" "$PG_Conf"

# create some PostgreSQL superusers
# these should really come from the command line!!
# perhaps defaulting to the real-user-id

# Using awk
echo -n 'Who should we make be PostgreSQL superuser(s)? '
read users
for user in $users; do
	if awk -F: -v "u=$user" '$1==u{x=1}END{exit x}' /etc/passwd
	then echo "No user $user"
	else su_pg__code_from_cmd 38 "$from" createuser --superuser $user
	fi
done

# Automate these things, please!!

echo "Configure $PG_Conf, etc.  For the Wicci:
(1) add the Make/wicci1 directory to dynamic_library_path
(2) symlink the XFiles directory to the PostgreSQL data directory
Restart the server and Have Fun!"
